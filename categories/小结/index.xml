<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>小结 on 街上的动物园</title><link>https://heeexy.com/categories/%E5%B0%8F%E7%BB%93/</link><description>Recent content in 小结 on 街上的动物园</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Heeexy</copyright><lastBuildDate>Mon, 17 Feb 2020 21:15:00 +0000</lastBuildDate><atom:link href="https://heeexy.com/categories/%E5%B0%8F%E7%BB%93/index.xml" rel="self" type="application/rss+xml"/><item><title>QPS从1k到2w，我做了什么</title><link>https://heeexy.com/p/qps%E4%BB%8E1k%E5%88%B02w%E6%88%91%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</link><pubDate>Mon, 17 Feb 2020 21:15:00 +0000</pubDate><guid>https://heeexy.com/p/qps%E4%BB%8E1k%E5%88%B02w%E6%88%91%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</guid><description>&lt;p>这两年有幸参与了商品列表系统的两次黑五挑战，QPS从最开始的1k都顶不住，到1w，再到2w，加上支持大量的AB实验，排序千人千面，功能越来越复杂，系统越来越庞大，可能这样的机会都不会常有，在此简单记录一下做系统优化的实践心得。&lt;/p>
&lt;h1 id="要素">
&lt;a href="#%e8%a6%81%e7%b4%a0">#&lt;/a>
要素
&lt;/h1>&lt;p>仔细想想，做优化其实并没有很多门道，个人总结起来就三个要素：&lt;/p>
&lt;ol>
&lt;li>业务&lt;/li>
&lt;li>工具&lt;/li>
&lt;li>人&lt;/li>
&lt;/ol>
&lt;h3 id="业务">
&lt;a href="#%e4%b8%9a%e5%8a%a1">#&lt;/a>
业务
&lt;/h3>&lt;p>业务就是你的任务，是优化的目标，业务的复杂性和独特性决定了你的问题只有自己去解决，网上没有答案，即使挖个大神来也不能立马帮到你。&lt;/p>
&lt;p>业务不仅仅包括公司对外提供的服务，还包括项目内部的一切细枝末节，比如代码的逻辑、服务器的部署、后台的配置、数据的流转，甚至不同团队间的分工合作等等。&lt;/p>
&lt;p>我们要做的其实就是优化这些业务，业务中的任何一个点都可以是优化的方向。&lt;/p>
&lt;h3 id="工具">
&lt;a href="#%e5%b7%a5%e5%85%b7">#&lt;/a>
工具
&lt;/h3>&lt;p>我们能用到的一切手段都是工具，有直接应对线上流量的服务器、代码、JVM、DB，也有间接可以帮助我们做优化的辅助工具，监控(Prometheus/Grafana)、日志(ELK)、压测(Goreplay)、诊断工具(Arthas)等等。&lt;/p>
&lt;h3 id="人">
&lt;a href="#%e4%ba%ba">#&lt;/a>
人
&lt;/h3>&lt;p>只了解业务的人面对问题束手无策，只钻研技术的人能解决的问题往往被技术限制了天花板。&lt;/p>
&lt;p>我们需要的是&lt;strong>精通业务，善用工具&lt;/strong>的人，能从监控数据中发现蛛丝马迹，能从复杂的业务关系中抽丝剥茧，能利用手上一切工具，发挥它们最大的作用。&lt;/p>
&lt;h1 id="步骤">
&lt;a href="#%e6%ad%a5%e9%aa%a4">#&lt;/a>
步骤
&lt;/h1>&lt;p>抛开搭建环境、压测、回归测试等工作，优化步骤最精简的话只有两步：&lt;/p>
&lt;ol>
&lt;li>找系统瓶颈&lt;/li>
&lt;li>优化，突破瓶颈&lt;/li>
&lt;/ol>
&lt;h3 id="找系统瓶颈">
&lt;a href="#%e6%89%be%e7%b3%bb%e7%bb%9f%e7%93%b6%e9%a2%88">#&lt;/a>
找系统瓶颈
&lt;/h3>&lt;p>找瓶颈就需要有依据，依据就是监控指标。&lt;/p>
&lt;p>监控指标的全面对于一个庞大的系统来说至关重要，不仅包括接口的耗时、JVM的状态、机器的负载等一些常见的指标，更需要细致到收集缓存的命中率、不同逻辑分支的占比、每张表的读写频率等具体业务相关的指标。&lt;/p>
&lt;p>如果缺少了业务指标的监控，定位问题很可能定位不到根源，能优化的空间也会受到技术的限制。&lt;/p>
&lt;h3 id="优化">
&lt;a href="#%e4%bc%98%e5%8c%96">#&lt;/a>
优化
&lt;/h3>&lt;p>找到瓶颈之后，看起来问题很快就能解决了，JVM顶不住就调heap，调GC，DB顶不住就加副本，优化sql，毕竟我们学习的时候学的就是这些，面试的时候考的也是这些。&lt;/p>
&lt;p>然而真正漫长而痛苦的优化过程中，这些直接了当的解决方式往往不会带来多少提升，因为简单的方法可能在我们当初开发功能时都已经做过。&lt;/p>
&lt;p>通常想要成倍的提高吞吐量，我们需要做更多&lt;strong>看似侧面的工作，解决根源上的问题&lt;/strong>。&lt;/p>
&lt;h4 id="几个例子">
&lt;a href="#%e5%87%a0%e4%b8%aa%e4%be%8b%e5%ad%90">#&lt;/a>
几个例子
&lt;/h4>&lt;p>当我们吞吐量在1k不到时，JVM顶不住，这时候不管是升机器配置，还是JVM调优都没有明显效果。因为我们有很多慢接口，即使只占请求总量的1%不到，在大流量下也是拖垮服务的重要因素。我们采用了使用ES的一些高级特性，同时将数据准备成便于查询的结构（见&lt;a class="link" href="https://heeexy.com/2018/12/02/es-for-search/" >ElasticSearch在高并发复杂查询业务场景的应用&lt;/a>）等一系列措施，消灭了慢查询接口。&lt;/p>
&lt;p>当慢接口处理完，吞吐量提升到了一定程度，JVM还是状况不佳，我们就考虑改善缓存。原本使用的JVM内缓存，尝试了调整缓存参数，使用集中式缓存Redis等方案后都没效果。最终通过Nginx层的缓存和一致性哈希大幅减轻了压力。&lt;/p>
&lt;p>当接口都很快，DB（Elasticsearch）开始顶不住，我们尝试了加机器、扩副本、调堆内存大小等手段，最终还是通过将商品详情的查询移出ES，由单独的服务通过查Redis来提供，减轻了ES大半的压力。&lt;/p>
&lt;p>。。。&lt;/p>
&lt;p>以上的手段未必适合其它项目，但系统的优化就是这样，从来就没有标准答案。&lt;/p>
&lt;p>我们能做的就只有深入业务，利用好每一种工具，然后充满信心地迎接下一个挑战。&lt;/p></description></item><item><title>近期阅读源码的总结与转变</title><link>https://heeexy.com/p/%E8%BF%91%E6%9C%9F%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%8E%E8%BD%AC%E5%8F%98/</link><pubDate>Sun, 28 Jan 2018 19:11:29 +0000</pubDate><guid>https://heeexy.com/p/%E8%BF%91%E6%9C%9F%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E6%80%BB%E7%BB%93%E4%B8%8E%E8%BD%AC%E5%8F%98/</guid><description>&lt;h2 id="阅读源码">
&lt;a href="#%e9%98%85%e8%af%bb%e6%ba%90%e7%a0%81">#&lt;/a>
阅读源码
&lt;/h2>&lt;h3 id="初读-spring">
&lt;a href="#%e5%88%9d%e8%af%bb-spring">#&lt;/a>
初读 Spring
&lt;/h3>&lt;p>2017年9月开始阅读 Spring 源码，便在博客上记录自己的阅读笔记，阅读的过程真的是恨痛苦，一个月的时间两大章节还没读完，效果上也不明显。&lt;/p>
&lt;p>后面几个月公司业务繁忙更是停下了读源码的节奏。&lt;/p>
&lt;h3 id="mybatis">
&lt;a href="#mybatis">#&lt;/a>
MyBatis
&lt;/h3>&lt;p>而12月入了一本《MyBatis 技术内幕》，介绍 MyBatis 的书，想从 MyBatis 入手，并且带着自己的小问题去研究 MyBatis 的源码，去探究一下我用 JSONObject 为什么就可以替代 JavaBean 。&lt;/p>
&lt;p>花了一个月的时间便读完了第一遍书，也大致解答了自己的疑惑。发现研究起 MyBatis 确实是轻松很多，总结一下有以下方面的原因：&lt;/p>
&lt;ul>
&lt;li>MyBatis 源码量小很多，层次结构清晰，功能明确，确实比 Spring 要简单很多&lt;/li>
&lt;li>作者划分章节层次合适&lt;/li>
&lt;li>学会了 Debug 源码&lt;/li>
&lt;li>拿起了实体书&amp;hellip;比9月看电子书时确实方便很多&lt;/li>
&lt;/ul>
&lt;p>一本书走完一遍，感觉清楚了很多，对于 MyBatis 剩下的任务，就是再读一遍，特别是带着问题再读，比如去研究它的缓存、配置、反射。&lt;/p>
&lt;h3 id="再读-spring">
&lt;a href="#%e5%86%8d%e8%af%bb-spring">#&lt;/a>
再读 Spring
&lt;/h3>&lt;p>1月再回过头继续学习 Spring ，其实最大的转变就是，不再执着于见到一段代码就想一直钻到底弄清楚了，Spring 的层次太深，特别容易钻着钻着就把自己绕得不知道在哪了。因此，还是根据书本介绍，文档注释和函数/变量名称大概了解函数的作用先，待刷完一遍之后再回过头二刷再追求搞明白吧。&lt;/p>
&lt;h2 id="转变">
&lt;a href="#%e8%bd%ac%e5%8f%98">#&lt;/a>
转变
&lt;/h2>&lt;h3 id="博客">
&lt;a href="#%e5%8d%9a%e5%ae%a2">#&lt;/a>
博客
&lt;/h3>&lt;p>关于博客的记录，也要做一做转变了。起初写得东西只是笔记，渐渐加入了自己的理解，但是目前来看质量还是不够，有一个很重要的原因就是自己对一些还没有深刻的认识。&lt;/p>
&lt;p>前阵子想独立钻研一波 Spring 的 autowiredByType，就匆匆忙忙开了一文，结果读着读着才发现这坑深不见底，实在不该在第一遍时就去碰&amp;hellip;&lt;/p>
&lt;p>因此，计划博客向更有营养的方向发展，尽量让博客能记录、传播一些能提升自己和其他读者认识的东西。像上一文自己动手实现解决循环依赖就是一个很好的主题，虽然文章写得不够好，技术含量也不够高，但是至少方向上来说确实能学到新东西。&lt;/p>
&lt;h3 id="学习">
&lt;a href="#%e5%ad%a6%e4%b9%a0">#&lt;/a>
学习
&lt;/h3>&lt;p>博客的更新频率将会降低，一方面是要自己先学透，提示博文质量，另一方面也是其实后面一段时间将会将重心放在找工作上。毕竟对于技术面试和以前的考试差不多，精读源码实在是性价比有点低，全面复习准备面试题效果更好。虽然我是不喜欢准备面试题的，但没有办法，下一份工作很关键，只有找到稳定的，能追求技术的团队，才能提供安心的钻研技术的环境。&lt;/p></description></item><item><title>前后端分离实践小结</title><link>https://heeexy.com/p/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93/</link><pubDate>Sun, 29 Oct 2017 00:27:05 +0000</pubDate><guid>https://heeexy.com/p/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93/</guid><description>&lt;h2 id="背景">
&lt;a href="#%e8%83%8c%e6%99%af">#&lt;/a>
背景
&lt;/h2>&lt;p>​ 公司项目转型,要开新的运营管理平台,我提议借此开新项目的机会,进行前后端分离,由我负责带领小组新技术学习/分享,探坑填坑.&lt;/p>
&lt;h2 id="分离原因">
&lt;a href="#%e5%88%86%e7%a6%bb%e5%8e%9f%e5%9b%a0">#&lt;/a>
分离原因
&lt;/h2>&lt;ol>
&lt;li>最关键一点,受不了jsp/freemarker里一塌糊涂的代码,分离之后,代码按规范写,简洁,好管理&lt;/li>
&lt;li>原本我们后端就一直在给Android/iOS提供接口,本次分离,可以方便以后H5端的项目重构,实现Android+iOS+H5的统一,一套接口可以供三端同时使用,大量节省工作量,也可以更好地保证公司产品质量的统一性.&lt;/li>
&lt;li>方便后端专心处理数据,前端实现页面效果.而不是前端仅仅画页面写css,后端还需要复制粘贴过来,套数据,修改已有页面时,前端更是不方便插手.&lt;/li>
&lt;/ol>
&lt;h2 id="技术选型">
&lt;a href="#%e6%8a%80%e6%9c%af%e9%80%89%e5%9e%8b">#&lt;/a>
技术选型
&lt;/h2>&lt;p>​ 组员后端技术都是SSM,前端都只是略接触过AngularJS/Vue.&lt;/p>
&lt;p>​ 我之前接触了一下Spring Boot,感觉配置很清爽,搭框架轻松,业务写起来快,可以让组员无缝切过来,无需费时学习,因此后端框架选定Spring Boot.而登录控制与权限管理一直是公司以前几个项目的弱项,因此本次决定引入shiro,而组员无一对shiro熟悉的,研究shiro的任务自然由我承担.&lt;/p>
&lt;p>​ 前端框架是本次前后端分离的重点,由于我们组无人熟悉前端的新框架,所以这次势必每个人都需要学习许多新的前端知识.我拿公司的H5项目的几个页面进行过搭建vue框架重构练手,认为vue文档清晰,资料丰富,相关开源方案够多,我们这次可以放心学习,使用.(当然最主要的还是因为坑全都得由我来填,得挑个熟悉的)&lt;/p>
&lt;h2 id="目前进展">
&lt;a href="#%e7%9b%ae%e5%89%8d%e8%bf%9b%e5%b1%95">#&lt;/a>
目前进展
&lt;/h2>&lt;p>​ 后端:Spring Boot框架搭建完成,shiro可以进行权限管理,自定义拦截器,常用工具类完成,对常用的增删改查,返回结果,异常处理都可以快速搞定.&lt;/p>
&lt;p>​ 前端:数据交互封装完毕,路由熟悉,前端权限管理初步熟悉,选用饿了么开源的Element框架,常用的增删改查的页面元素及工具方法都已让大家掌握.&lt;/p>
&lt;p>​ 本周一开始教组员使用Intellij IDEA,教前端快速铺页面的方法,介绍前后端我封装的各种小轮子.经过一周时间,全部都已熟悉这套新的前后端框架,每个人都可以独立快速地推出常用页面.&lt;/p>
&lt;h2 id="接口端小技巧">
&lt;a href="#%e6%8e%a5%e5%8f%a3%e7%ab%af%e5%b0%8f%e6%8a%80%e5%b7%a7">#&lt;/a>
接口端小技巧
&lt;/h2>&lt;p>​ 因为后端全部返回统一json格式的接口,所以我设计了一些小的工具方法,方便快速推出新接口,节省重复代码.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用JSONObject而不是实体类&lt;/p>
&lt;p>​ 因为后端业务不算复杂,所以舍弃了实体类的语义性,转而使用阿里的fastjson的JSONObject接收MyBatis返回的结果.比如一个简单的查询只需要&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;select&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;getSimple&amp;#34;&lt;/span> &lt;span class="na">resultType=&lt;/span>&lt;span class="s">&amp;#34;com.alibaba.fastjson.JSONObject&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> SELECT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s.order_id shopOrderId,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> s.operation operation,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> date_format(s.create_time, &amp;#39;%Y.%m.%d %H:%i:%s&amp;#39;) createTime
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FROM shop_order_log s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> WHERE s.user_delete_status = &amp;#34;1&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/select&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就可以将三个字段shopOrderId,operation,createTime放入json内,字段名称更加灵活,也免去了大量的建实体类,写resultMap的代码.&lt;/p>
&lt;p>​ 更好的一点是,不使用实体类,可以在返回结果中避免掉很多空的需不要的字段.&lt;/p>
&lt;p>​ 还有,因为所有的接口层都返回JSONObject,所以编写工具方法,快速返回成功/失败结果也很简单,我写了多个工具方法,包括入参转json,入参非空校验,返回成功/失败结果,分页,这里就不一一贴出代码了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自定义Exception&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">CommonJsonException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">RuntimeException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JSONObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resultJson&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">* 调用时可以在任何代码处直接throws这个Exception,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">* 都会统一被拦截,并封装好json返回给前台
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">* @param errorEnum 以错误的ErrorEnum做参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">CommonJsonException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ErrorEnum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">errorEnum&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">JSONObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JSONObject&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">CommonUtil&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">returnJson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">errorEnum&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">resultJson&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">jsonObject&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">CommonJsonException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">JSONObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resultJson&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">resultJson&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resultJson&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JSONObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getResultJson&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">resultJson&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@ControllerAdvice&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@ResponseBody&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">GlobalExceptionHandler&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@ExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CommonJsonException&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JSONObject&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">CommonJsonExceptionHandler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CommonJsonException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonJsonException&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonJsonException&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getResultJson&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>在需要返回给前端错误代码编号时,比如校验参数非空,校验手机号失败,可以直接抛出此异常,经错误拦截器拦截到此异常后,可以直接返回错误码给前端,节省大量的判断/返回的代码.这一点也是前阵子从Spring源码中学到的.&lt;/p>
&lt;h2 id="存在的问题">
&lt;a href="#%e5%ad%98%e5%9c%a8%e7%9a%84%e9%97%ae%e9%a2%98">#&lt;/a>
存在的问题
&lt;/h2>&lt;ol>
&lt;li>近期主要问题基本都是待我去研究深入的技术,比如shiro的动态权限与vue-router的异步路由的结合,vue组件的通信,vuex的状态管理&lt;/li>
&lt;li>其次是组员需要对vue更加熟悉,我这次要求了大家抛弃jQuery,用数据绑定的思想去写前端.目前大家的前端水平也还只是可以快速复制粘贴出页面,对于复杂的页面和组件,甚至对我们前端项目的目录结构与各部分功能,都不算掌握.&lt;/li>
&lt;li>目前我们所谓的前后端分离其实还只是初步的业务和代码上的分离,以后如果要重构H5项目,可能还需要开NodeJS项目来解决和Android/iOS一样的接口加密问题,统一session管理问题,以及更多的前后端分离可能给我们带来的问题.&lt;/li>
&lt;/ol></description></item></channel></rss>