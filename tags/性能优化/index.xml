<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>性能优化 on 街上的动物园</title><link>https://heeexy.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><description>Recent content in 性能优化 on 街上的动物园</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Heeexy</copyright><lastBuildDate>Sun, 28 Jun 2020 18:37:00 +0000</lastBuildDate><atom:link href="https://heeexy.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>日志ES集群的潜在性能瓶颈--段合并</title><link>https://heeexy.com/p/%E6%97%A5%E5%BF%97es%E9%9B%86%E7%BE%A4%E7%9A%84%E6%BD%9C%E5%9C%A8%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88--%E6%AE%B5%E5%90%88%E5%B9%B6/</link><pubDate>Sun, 28 Jun 2020 18:37:00 +0000</pubDate><guid>https://heeexy.com/p/%E6%97%A5%E5%BF%97es%E9%9B%86%E7%BE%A4%E7%9A%84%E6%BD%9C%E5%9C%A8%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88--%E6%AE%B5%E5%90%88%E5%B9%B6/</guid><description>&lt;h2 id="先抛结论">
&lt;a href="#%e5%85%88%e6%8a%9b%e7%bb%93%e8%ae%ba">#&lt;/a>
先抛结论
&lt;/h2>&lt;p>如果日志型ES集群system load 过高，I/O打满，尤其是在&lt;strong>读写低谷时间段 read 异常高&lt;/strong>，可以考虑排查段合并的问题。&lt;/p>
&lt;p>如果的确是遇到了段合并问题，可以考虑两个方向：&lt;/p>
&lt;ol>
&lt;li>机械硬盘升级为SSD。&lt;/li>
&lt;li>大索引拆分成小索引。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>PS. 再附送一个潜在的查询问题可能导致的IO打满：通配符查询，参见&lt;a class="link" href="https://elasticsearch.cn/article/171" target="_blank" rel="noopener"
>文章&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="排查">
&lt;a href="#%e6%8e%92%e6%9f%a5">#&lt;/a>
排查
&lt;/h2>&lt;p>详细的排查过程就不赘述了，无非是加监控，包括业务层面、ES层面、机器层面，然后横向、纵向的分析各种监控指标。&lt;/p>
&lt;p>这里分享几个容易被忽略的指标/api&lt;/p>
&lt;ol>
&lt;li>
&lt;p>查看最大的索引的 _stats 中merge部分：&lt;/p>
&lt;p>total_stopped_time_in_millis ：通常应该是0&lt;/p>
&lt;p>total_size_in_bytes：总共merge了这么多数据，你会发现远大于索引大小。下文会介绍这一指标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>观察线程状况，api详细参数可以查阅&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-hot-threads.html#cluster-nodes-hot-threads-api-query-params" target="_blank" rel="noopener"
>官方文档&lt;/a>。我在定位问题时还不知道hot_threads这个api，如果提前知道的话可能就省下不少时间了。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">GET _cat/thread_pool?v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GET /_nodes/hot_threads
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="原理">
&lt;a href="#%e5%8e%9f%e7%90%86">#&lt;/a>
原理
&lt;/h2>&lt;p>段合并的基本原理很简单，两个（多个）已提交的段写入一个新的段。&lt;/p>
&lt;p>&lt;img src="https://www.elastic.co/guide/cn/elasticsearch/guide/current/images/elas_1110.png"
loading="lazy"
>&lt;/p>
&lt;p>这种读写除了尚在内存中的部分，就难免需要消耗磁盘IO了。&lt;/p>
&lt;p>而从&lt;a class="link" href="http://blog.mikemccandless.com/2011/02/visualizing-lucenes-segment-merges.html" target="_blank" rel="noopener"
>可视化Lucene段合并&lt;/a>一文中得知，这种类似于&lt;a class="link" href="https://en.wikipedia.org/wiki/Write_amplification" target="_blank" rel="noopener"
>SSD写放大&lt;/a>的过程其实是一种浪费（文中称为tax），一个最终1G的索引可能由于merge而需要读写10G磁盘。&lt;/p>
&lt;p>段合并算法优化的一个目标就是降低这种浪费，更高效地做段合并。&lt;/p>
&lt;p>而减小我们索引的体积就可以轻松的带来显著的提升。&lt;/p>
&lt;p>&lt;img src="http://img.heeexy.com/es-io.png"
loading="lazy"
alt="es-io"
>&lt;/p></description></item><item><title>QPS从1k到2w，我做了什么</title><link>https://heeexy.com/p/qps%E4%BB%8E1k%E5%88%B02w%E6%88%91%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</link><pubDate>Mon, 17 Feb 2020 21:15:00 +0000</pubDate><guid>https://heeexy.com/p/qps%E4%BB%8E1k%E5%88%B02w%E6%88%91%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</guid><description>&lt;p>这两年有幸参与了商品列表系统的两次黑五挑战，QPS从最开始的1k都顶不住，到1w，再到2w，加上支持大量的AB实验，排序千人千面，功能越来越复杂，系统越来越庞大，可能这样的机会都不会常有，在此简单记录一下做系统优化的实践心得。&lt;/p>
&lt;h1 id="要素">
&lt;a href="#%e8%a6%81%e7%b4%a0">#&lt;/a>
要素
&lt;/h1>&lt;p>仔细想想，做优化其实并没有很多门道，个人总结起来就三个要素：&lt;/p>
&lt;ol>
&lt;li>业务&lt;/li>
&lt;li>工具&lt;/li>
&lt;li>人&lt;/li>
&lt;/ol>
&lt;h3 id="业务">
&lt;a href="#%e4%b8%9a%e5%8a%a1">#&lt;/a>
业务
&lt;/h3>&lt;p>业务就是你的任务，是优化的目标，业务的复杂性和独特性决定了你的问题只有自己去解决，网上没有答案，即使挖个大神来也不能立马帮到你。&lt;/p>
&lt;p>业务不仅仅包括公司对外提供的服务，还包括项目内部的一切细枝末节，比如代码的逻辑、服务器的部署、后台的配置、数据的流转，甚至不同团队间的分工合作等等。&lt;/p>
&lt;p>我们要做的其实就是优化这些业务，业务中的任何一个点都可以是优化的方向。&lt;/p>
&lt;h3 id="工具">
&lt;a href="#%e5%b7%a5%e5%85%b7">#&lt;/a>
工具
&lt;/h3>&lt;p>我们能用到的一切手段都是工具，有直接应对线上流量的服务器、代码、JVM、DB，也有间接可以帮助我们做优化的辅助工具，监控(Prometheus/Grafana)、日志(ELK)、压测(Goreplay)、诊断工具(Arthas)等等。&lt;/p>
&lt;h3 id="人">
&lt;a href="#%e4%ba%ba">#&lt;/a>
人
&lt;/h3>&lt;p>只了解业务的人面对问题束手无策，只钻研技术的人能解决的问题往往被技术限制了天花板。&lt;/p>
&lt;p>我们需要的是&lt;strong>精通业务，善用工具&lt;/strong>的人，能从监控数据中发现蛛丝马迹，能从复杂的业务关系中抽丝剥茧，能利用手上一切工具，发挥它们最大的作用。&lt;/p>
&lt;h1 id="步骤">
&lt;a href="#%e6%ad%a5%e9%aa%a4">#&lt;/a>
步骤
&lt;/h1>&lt;p>抛开搭建环境、压测、回归测试等工作，优化步骤最精简的话只有两步：&lt;/p>
&lt;ol>
&lt;li>找系统瓶颈&lt;/li>
&lt;li>优化，突破瓶颈&lt;/li>
&lt;/ol>
&lt;h3 id="找系统瓶颈">
&lt;a href="#%e6%89%be%e7%b3%bb%e7%bb%9f%e7%93%b6%e9%a2%88">#&lt;/a>
找系统瓶颈
&lt;/h3>&lt;p>找瓶颈就需要有依据，依据就是监控指标。&lt;/p>
&lt;p>监控指标的全面对于一个庞大的系统来说至关重要，不仅包括接口的耗时、JVM的状态、机器的负载等一些常见的指标，更需要细致到收集缓存的命中率、不同逻辑分支的占比、每张表的读写频率等具体业务相关的指标。&lt;/p>
&lt;p>如果缺少了业务指标的监控，定位问题很可能定位不到根源，能优化的空间也会受到技术的限制。&lt;/p>
&lt;h3 id="优化">
&lt;a href="#%e4%bc%98%e5%8c%96">#&lt;/a>
优化
&lt;/h3>&lt;p>找到瓶颈之后，看起来问题很快就能解决了，JVM顶不住就调heap，调GC，DB顶不住就加副本，优化sql，毕竟我们学习的时候学的就是这些，面试的时候考的也是这些。&lt;/p>
&lt;p>然而真正漫长而痛苦的优化过程中，这些直接了当的解决方式往往不会带来多少提升，因为简单的方法可能在我们当初开发功能时都已经做过。&lt;/p>
&lt;p>通常想要成倍的提高吞吐量，我们需要做更多&lt;strong>看似侧面的工作，解决根源上的问题&lt;/strong>。&lt;/p>
&lt;h4 id="几个例子">
&lt;a href="#%e5%87%a0%e4%b8%aa%e4%be%8b%e5%ad%90">#&lt;/a>
几个例子
&lt;/h4>&lt;p>当我们吞吐量在1k不到时，JVM顶不住，这时候不管是升机器配置，还是JVM调优都没有明显效果。因为我们有很多慢接口，即使只占请求总量的1%不到，在大流量下也是拖垮服务的重要因素。我们采用了使用ES的一些高级特性，同时将数据准备成便于查询的结构（见&lt;a class="link" href="https://heeexy.com/2018/12/02/es-for-search/" >ElasticSearch在高并发复杂查询业务场景的应用&lt;/a>）等一系列措施，消灭了慢查询接口。&lt;/p>
&lt;p>当慢接口处理完，吞吐量提升到了一定程度，JVM还是状况不佳，我们就考虑改善缓存。原本使用的JVM内缓存，尝试了调整缓存参数，使用集中式缓存Redis等方案后都没效果。最终通过Nginx层的缓存和一致性哈希大幅减轻了压力。&lt;/p>
&lt;p>当接口都很快，DB（Elasticsearch）开始顶不住，我们尝试了加机器、扩副本、调堆内存大小等手段，最终还是通过将商品详情的查询移出ES，由单独的服务通过查Redis来提供，减轻了ES大半的压力。&lt;/p>
&lt;p>。。。&lt;/p>
&lt;p>以上的手段未必适合其它项目，但系统的优化就是这样，从来就没有标准答案。&lt;/p>
&lt;p>我们能做的就只有深入业务，利用好每一种工具，然后充满信心地迎接下一个挑战。&lt;/p></description></item><item><title>Elasticsearch在高并发复杂查询业务场景的应用</title><link>https://heeexy.com/p/elasticsearch%E5%9C%A8%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://heeexy.com/p/elasticsearch%E5%9C%A8%E9%AB%98%E5%B9%B6%E5%8F%91%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>&lt;p>说起 Elasticsearch，往往大家想到的都是 ELK 的一套，但是作为 NoSQL，ES 有极快的响应速度，强大的聚合功能，支持复杂的查询条件，应对高并发的复杂查询的业务场景其实也是非常强力的。&lt;/p>
&lt;blockquote>
&lt;p>You Know, for Search&lt;/p>
&lt;/blockquote>
&lt;p>我们团队就一直使用 ES 作为主力数据库， 从一开始做全文检索，到现在承担全部的商品列表页查询。近几个月将查询系统的 qps 从 1k 优化到了 10k+，其中 ES 的优化占了很重要一部分，准确的来说，应该是对 ES 特性的扬长避短起到了非常大的作用。&lt;/p>
&lt;p>&lt;img src="http://img.heeexy.com/webpage.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="数组--嵌套结构">
&lt;a href="#%e6%95%b0%e7%bb%84--%e5%b5%8c%e5%a5%97%e7%bb%93%e6%9e%84">#&lt;/a>
数组 &amp;amp; 嵌套结构
&lt;/h2>&lt;p>ES 没有 join，很多人直接就会认为 ES 无法处理一对多的情况，其实还有&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/6.5/array.html" target="_blank" rel="noopener"
>数组&lt;/a>和&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/6.5/nested.html" target="_blank" rel="noopener"
>嵌套结构&lt;/a>可以应付常见的业务场景。&lt;/p>
&lt;p>比如一个商品拥有多种属性，都存放在一个数组字段中，使用 must 和 must_not 就可以灵活地进行查询筛选。&lt;/p>
&lt;p>比如同款不同色的几件T恤，使用嵌套结构保存，搜索时只需要其中一件满足筛选条件，便可以全部带出来，在页面上以多个小色块展示，而无需占用多个展示位。并且还可以拿满足筛选条件的商品中的某属性最大值/最小值等进行排序，如官网给出的&lt;a class="link" href="https://www.elastic.co/guide/en/elasticsearch/reference/6.5/search-request-sort.html" target="_blank" rel="noopener"
>示例&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;query&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;nested&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;query&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;bool&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;must&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;range&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;parent.age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;gte&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="p">}}},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filter&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;nested&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;parent.child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;query&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;match&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;parent.child.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;matt&amp;#34;&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;sort&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;parent.child.age&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;mode&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;min&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;order&amp;#34;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;asc&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;nested&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;parent&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filter&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;range&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;parent.age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;gte&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;nested&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;parent.child&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;filter&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;match&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;parent.child.name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;matt&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="聚合">
&lt;a href="#%e8%81%9a%e5%90%88">#&lt;/a>
聚合
&lt;/h2>&lt;p>商品列表页面能用到聚合的场景非常多，比如聚合出分类下（可能多达数万个商品）的各子分类，各属性的数量，并且需要支持复杂的筛选条件，比如库存，价格范围等等，并且这种查询速度远比 RDS 的 join + group by + count 快。&lt;/p>
&lt;p>又比如需要查出最近10天内有新商品的日期列表，那就可以用到 date_histogram 聚合函数。&lt;/p>
&lt;h2 id="动态字段">
&lt;a href="#%e5%8a%a8%e6%80%81%e5%ad%97%e6%ae%b5">#&lt;/a>
动态字段
&lt;/h2>&lt;p>动态字段的设计也为我们的业务提供了很大便利，由于与具体业务关联性太强，就不详细展开了。&lt;/p>
&lt;p>ES能支持的动态字段数量非常的多，不过这里要留意的就是动态字段一个比较容易出问题的地方，就是瞬时写入大量的动态字段会导致集群索引的元数据大量变动，master 节点负载暴涨甚至挂掉。&lt;/p>
&lt;h2 id="缺陷">
&lt;a href="#%e7%bc%ba%e9%99%b7">#&lt;/a>
缺陷
&lt;/h2>&lt;ol>
&lt;li>没有 join。ES 的查询速度非常的快，但是不能 join 毕竟还是有一些业务场景无法使用。当然话又说回来，在高并发量下，多表 join 能不能抗得住也是个问题。对于查询，我们一贯的原则还是：&lt;strong>把数据离线准备成便于查询的结构，线上实时查询尽可能的简单，一步到位&lt;/strong>。&lt;/li>
&lt;li>由于要把数据离线准备好，这便带来了数据同步更新的问题，数据的时效性、准确性都需要保证，数组与嵌套结构的数据更新也不够方便高效，这些都会增加很多的工作量。&lt;/li>
&lt;/ol></description></item></channel></rss>