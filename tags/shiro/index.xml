<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shiro on 网站标题</title><link>https://heeexy.com/tags/shiro/</link><description>Recent content in Shiro on 网站标题</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 29 Oct 2017 00:27:05 +0000</lastBuildDate><atom:link href="https://heeexy.com/tags/shiro/index.xml" rel="self" type="application/rss+xml"/><item><title>前后端分离实践小结</title><link>https://heeexy.com/posts/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 29 Oct 2017 00:27:05 +0000</pubDate><guid>https://heeexy.com/posts/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5/</guid><description>&lt;h2 id="背景">
&lt;a href="#%e8%83%8c%e6%99%af" class="header-anchor">#&lt;/a>
背景
&lt;/h2>&lt;p>​ 公司项目转型,要开新的运营管理平台,我提议借此开新项目的机会,进行前后端分离,由我负责带领小组新技术学习/分享,探坑填坑.&lt;/p>
&lt;h2 id="分离原因">
&lt;a href="#%e5%88%86%e7%a6%bb%e5%8e%9f%e5%9b%a0" class="header-anchor">#&lt;/a>
分离原因
&lt;/h2>&lt;ol>
&lt;li>最关键一点,受不了jsp/freemarker里一塌糊涂的代码,分离之后,代码按规范写,简洁,好管理&lt;/li>
&lt;li>原本我们后端就一直在给Android/iOS提供接口,本次分离,可以方便以后H5端的项目重构,实现Android+iOS+H5的统一,一套接口可以供三端同时使用,大量节省工作量,也可以更好地保证公司产品质量的统一性.&lt;/li>
&lt;li>方便后端专心处理数据,前端实现页面效果.而不是前端仅仅画页面写css,后端还需要复制粘贴过来,套数据,修改已有页面时,前端更是不方便插手.&lt;/li>
&lt;/ol>
&lt;h2 id="技术选型">
&lt;a href="#%e6%8a%80%e6%9c%af%e9%80%89%e5%9e%8b" class="header-anchor">#&lt;/a>
技术选型
&lt;/h2>&lt;p>​ 组员后端技术都是SSM,前端都只是略接触过AngularJS/Vue.&lt;/p>
&lt;p>​ 我之前接触了一下Spring Boot,感觉配置很清爽,搭框架轻松,业务写起来快,可以让组员无缝切过来,无需费时学习,因此后端框架选定Spring Boot.而登录控制与权限管理一直是公司以前几个项目的弱项,因此本次决定引入shiro,而组员无一对shiro熟悉的,研究shiro的任务自然由我承担.&lt;/p>
&lt;p>​ 前端框架是本次前后端分离的重点,由于我们组无人熟悉前端的新框架,所以这次势必每个人都需要学习许多新的前端知识.我拿公司的H5项目的几个页面进行过搭建vue框架重构练手,认为vue文档清晰,资料丰富,相关开源方案够多,我们这次可以放心学习,使用.(当然最主要的还是因为坑全都得由我来填,得挑个熟悉的)&lt;/p>
&lt;h2 id="目前进展">
&lt;a href="#%e7%9b%ae%e5%89%8d%e8%bf%9b%e5%b1%95" class="header-anchor">#&lt;/a>
目前进展
&lt;/h2>&lt;p>​ 后端:Spring Boot框架搭建完成,shiro可以进行权限管理,自定义拦截器,常用工具类完成,对常用的增删改查,返回结果,异常处理都可以快速搞定.&lt;/p>
&lt;p>​ 前端:数据交互封装完毕,路由熟悉,前端权限管理初步熟悉,选用饿了么开源的Element框架,常用的增删改查的页面元素及工具方法都已让大家掌握.&lt;/p>
&lt;p>​ 本周一开始教组员使用Intellij IDEA,教前端快速铺页面的方法,介绍前后端我封装的各种小轮子.经过一周时间,全部都已熟悉这套新的前后端框架,每个人都可以独立快速地推出常用页面.&lt;/p>
&lt;h2 id="接口端小技巧">
&lt;a href="#%e6%8e%a5%e5%8f%a3%e7%ab%af%e5%b0%8f%e6%8a%80%e5%b7%a7" class="header-anchor">#&lt;/a>
接口端小技巧
&lt;/h2>&lt;p>​ 因为后端全部返回统一json格式的接口,所以我设计了一些小的工具方法,方便快速推出新接口,节省重复代码.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用JSONObject而不是实体类&lt;/p>
&lt;p>​ 因为后端业务不算复杂,所以舍弃了实体类的语义性,转而使用阿里的fastjson的JSONObject接收MyBatis返回的结果.比如一个简单的查询只需要&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;select&lt;/span> &lt;span style="color:#a6e22e">id=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;getSimple&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">resultType=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.alibaba.fastjson.JSONObject&amp;#34;&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SELECT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s.order_id shopOrderId,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s.operation operation,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> date_format(s.create_time, &amp;#39;%Y.%m.%d %H:%i:%s&amp;#39;) createTime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FROM shop_order_log s
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WHERE s.user_delete_status = &amp;#34;1&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/select&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>就可以将三个字段shopOrderId,operation,createTime放入json内,字段名称更加灵活,也免去了大量的建实体类,写resultMap的代码.&lt;/p>
&lt;p>​ 更好的一点是,不使用实体类,可以在返回结果中避免掉很多空的需不要的字段.&lt;/p>
&lt;p>​ 还有,因为所有的接口层都返回JSONObject,所以编写工具方法,快速返回成功/失败结果也很简单,我写了多个工具方法,包括入参转json,入参非空校验,返回成功/失败结果,分页,这里就不一一贴出代码了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自定义Exception&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CommonJsonException&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> RuntimeException {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> JSONObject resultJson;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">* 调用时可以在任何代码处直接throws这个Exception,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">* 都会统一被拦截,并封装好json返回给前台
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">* @param errorEnum 以错误的ErrorEnum做参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">CommonJsonException&lt;/span>(ErrorEnum errorEnum) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSONObject jsonObject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> JSONObject();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CommonUtil.&lt;span style="color:#a6e22e">returnJson&lt;/span>(jsonObject, errorEnum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">resultJson&lt;/span> &lt;span style="color:#f92672">=&lt;/span> jsonObject;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">CommonJsonException&lt;/span>(JSONObject resultJson) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">resultJson&lt;/span> &lt;span style="color:#f92672">=&lt;/span> resultJson;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> JSONObject &lt;span style="color:#a6e22e">getResultJson&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> resultJson;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ControllerAdvice&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ResponseBody&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GlobalExceptionHandler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@ExceptionHandler&lt;/span>(CommonJsonException.&lt;span style="color:#a6e22e">class&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> JSONObject &lt;span style="color:#a6e22e">CommonJsonExceptionHandler&lt;/span>(CommonJsonException commonJsonException) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> commonJsonException.&lt;span style="color:#a6e22e">getResultJson&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>在需要返回给前端错误代码编号时,比如校验参数非空,校验手机号失败,可以直接抛出此异常,经错误拦截器拦截到此异常后,可以直接返回错误码给前端,节省大量的判断/返回的代码.这一点也是前阵子从Spring源码中学到的.&lt;/p>
&lt;h2 id="存在的问题">
&lt;a href="#%e5%ad%98%e5%9c%a8%e7%9a%84%e9%97%ae%e9%a2%98" class="header-anchor">#&lt;/a>
存在的问题
&lt;/h2>&lt;ol>
&lt;li>近期主要问题基本都是待我去研究深入的技术,比如shiro的动态权限与vue-router的异步路由的结合,vue组件的通信,vuex的状态管理&lt;/li>
&lt;li>其次是组员需要对vue更加熟悉,我这次要求了大家抛弃jQuery,用数据绑定的思想去写前端.目前大家的前端水平也还只是可以快速复制粘贴出页面,对于复杂的页面和组件,甚至对我们前端项目的目录结构与各部分功能,都不算掌握.&lt;/li>
&lt;li>目前我们所谓的前后端分离其实还只是初步的业务和代码上的分离,以后如果要重构H5项目,可能还需要开NodeJS项目来解决和Android/iOS一样的接口加密问题,统一session管理问题,以及更多的前后端分离可能给我们带来的问题.&lt;/li>
&lt;/ol></description></item><item><title>搭建springboot-shiro-vue框架时遇到的坑</title><link>https://heeexy.com/posts/build-springboot-shiro/</link><pubDate>Sun, 22 Oct 2017 11:19:33 +0000</pubDate><guid>https://heeexy.com/posts/build-springboot-shiro/</guid><description>&lt;p>​ 最近在做前后端分离的新框架,选用了后端springboot+shiro,前端vue+elementUI,第一次搭SSM之外的非demo项目,尤其shiro更是之前从未接触,折腾了很多天,遇到很多问题,大部分能百度出来,剩下的非常费时的问题且称之为坑吧.&lt;/p>
&lt;h3 id="跨域">
&lt;a href="#%e8%b7%a8%e5%9f%9f" class="header-anchor">#&lt;/a>
跨域
&lt;/h3>&lt;p>​ 一大部分问题就是跨域造成的,本身vue-cli搭建的项目可以用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 1. axios的baseURL设置为/api
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2. 如下设置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">proxyTable&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;/api&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">target&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;http://127.0.0.1:8080/&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">changeOrigin&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pathRewrite&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;^/api&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来解决开发环境跨域的问题,生产环境反正可以打包静态文件到springboot项目中直接跑.&lt;/p>
&lt;p>而我还是脑抽得选择了强行跨域,假装自己要把静态文件单独放个服务器跑&amp;hellip;为此遇到很多问题,折腾好几天.&lt;/p>
&lt;p>&lt;strong>因此强力推荐上面的方案,简单快捷地解决跨域!&lt;/strong>&lt;/p>
&lt;p>如果生产环境真的需要跨域的话,再按下面方法设置&lt;/p>
&lt;p>大部分跨域的配置都能百度搜出来:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>axios要 &lt;code>withCredentials: true&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用session而不用啥特殊的token之类的话,就不用 &lt;code>config.headers['X-Token'] = getToken() &lt;/code> ,这句是&lt;a class="link" href="https://github.com/PanJiaChen/vueAdmin-template" target="_blank" rel="noopener"
>&lt;strong>vueAdmin-template&lt;/strong>&lt;/a> 中带的,需要删掉.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>后端需要配置允许跨域&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Configuration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CorsConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> CorsConfiguration &lt;span style="color:#a6e22e">buildConfig&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CorsConfiguration corsConfiguration &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CorsConfiguration();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> corsConfiguration.&lt;span style="color:#a6e22e">addAllowedOrigin&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 1 设置访问源地址&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> corsConfiguration.&lt;span style="color:#a6e22e">addAllowedHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 2 设置访问源请求头&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> corsConfiguration.&lt;span style="color:#a6e22e">addAllowedMethod&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// 3 设置访问源请求方法&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> corsConfiguration.&lt;span style="color:#a6e22e">setAllowCredentials&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> corsConfiguration;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> CorsFilter &lt;span style="color:#a6e22e">corsFilter&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UrlBasedCorsConfigurationSource source &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> UrlBasedCorsConfigurationSource();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> source.&lt;span style="color:#a6e22e">registerCorsConfiguration&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/**&amp;#34;&lt;/span>, buildConfig()); &lt;span style="color:#75715e">// 4 对接口配置跨域设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> CorsFilter(source);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="shiro拦截ajax返回json">
&lt;a href="#shiro%e6%8b%a6%e6%88%aaajax%e8%bf%94%e5%9b%9ejson" class="header-anchor">#&lt;/a>
shiro拦截ajax返回json
&lt;/h3>&lt;p>​ shiro拦截到需要登录而用户尚未的请求时,会重定向至 /login/auth (未配置时是login.jsp),而ajax是不允许重定向的,ajax会收到302错误码,报错&lt;/p>
&lt;blockquote>
&lt;p>Failed to load http://localhost:8080/test: Redirect from &amp;lsquo;http://localhost:8080/test&amp;rsquo; to &amp;lsquo;http://localhost:8080/login/auth&amp;rsquo; has been blocked by CORS policy: No &amp;lsquo;Access-Control-Allow-Origin&amp;rsquo; header is present on the requested resource. Origin &amp;lsquo;http://localhost:9528&amp;rsquo; is therefore not allowed access.&lt;/p>
&lt;/blockquote>
&lt;p>因此我们需要对拦截器进行改造,不要它默认的重定向了,我们直接去response里把json写好输出给前端.&lt;/p>
&lt;p>自定义filter,(因为我的后端全部返回json,所以这里不判断是否ajax了)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AjaxPermissionsAuthorizationFilter&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> FormAuthenticationFilter {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">onAccessDenied&lt;/span>(ServletRequest request, ServletResponse response) &lt;span style="color:#66d9ef">throws&lt;/span> Exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> JSONObject jsonObject &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> JSONObject();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> jsonObject.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;returnMsg&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;未登录或登录已失效&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">isLoginRequest&lt;/span>(request, response)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">isLoginSubmission&lt;/span>(request, response)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">executeLogin&lt;/span>(request, response);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PrintWriter out &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HttpServletResponse res &lt;span style="color:#f92672">=&lt;/span> (HttpServletResponse) response;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//下面这几行也是后面要讲的坑, 这里的Access-Control-Allow-Origin 设置为*的话,前端还是会报错. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.&lt;span style="color:#a6e22e">setHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Access-Control-Allow-Origin&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http://localhost:9528&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// response1.setHeader(&amp;#34;Access-Control-Allow-Origin&amp;#34;, &amp;#34;*&amp;#34;);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.&lt;span style="color:#a6e22e">setHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Access-Control-Allow-Credentials&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.&lt;span style="color:#a6e22e">setCharacterEncoding&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span>);&lt;span style="color:#75715e">//设置编码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> res.&lt;span style="color:#a6e22e">setContentType&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>);&lt;span style="color:#75715e">//设置返回类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out &lt;span style="color:#f92672">=&lt;/span> response.&lt;span style="color:#a6e22e">getWriter&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out.&lt;span style="color:#a6e22e">println&lt;/span>(jsonObject);&lt;span style="color:#75715e">//输出&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (Exception e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> out) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out.&lt;span style="color:#a6e22e">flush&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out.&lt;span style="color:#a6e22e">close&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来就是最坑的地方了,拦截器的注入.&lt;/p>
&lt;p>&lt;a class="link" href="http://m.blog.csdn.net/u014042146/article/details/72834582" target="_blank" rel="noopener"
>原本搜到的方法&lt;/a>是在ShiroConfiguration类中注入.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>(name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ajaxPermissionsAuthorizationFilter&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> AjaxPermissionsAuthorizationFilter &lt;span style="color:#a6e22e">ajaxPermissionsAuthorizationFilter&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> AjaxPermissionsAuthorizationFilter();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//然后shiroFilterFactoryBean设置过滤器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>String, Filter&lt;span style="color:#f92672">&amp;gt;&lt;/span> filterMap &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> LinkedHashMap&lt;span style="color:#f92672">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> filterMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;authc&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">new&lt;/span> AjaxPermissionsAuthorizationFilter());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shiroFilterFactoryBean.&lt;span style="color:#a6e22e">setFilters&lt;/span>(filterMap);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结果自定义的拦截器把所有的请求都拦截了,直接无视了我设置的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>filterChainDefinitionMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;anon&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filterChainDefinitionMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/static/**&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;anon&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filterChainDefinitionMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/login/**&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;anon&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filterChainDefinitionMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/error&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;anon&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filterChainDefinitionMap.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/**&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;authc&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>各种百度,能搜到的相关的资料也就只有&lt;a class="link" href="https://segmentfault.com/q/1010000010747919" target="_blank" rel="noopener"
>segmentfault的提问没解决,题主给我的回复也不能解决&lt;/a> , &lt;a class="link" href="https://zhidao.baidu.com/question/436777330932025604.html" target="_blank" rel="noopener"
>百度知道提问的没解决&lt;/a> , &lt;a class="link" href="http://www.jianshu.com/p/e30dc5e78641" target="_blank" rel="noopener"
>简书方案并不能解决&lt;/a> .&lt;/p>
&lt;p>最终在某个百度结果的第三页找到&lt;a class="link" href="http://www.hillfly.com/2017/179.html" target="_blank" rel="noopener"
>这篇博客&lt;/a> ,博主对问题一步一步的排查分析,debug源码,最终知道&lt;/p>
&lt;p>&lt;strong>Springboot 先加载了我们自定义的 Filter，然后再加载了 ShiroFilter&lt;/strong>&lt;/p>
&lt;p>解决方法:
在自定义的filter里加上下面的代码&lt;/p>
&lt;pre tabindex="0">&lt;code>@Bean
public FilterRegistrationBean registration(自定义Filter filter) {
FilterRegistrationBean registration = new FilterRegistrationBean(filter);
registration.setEnabled(false);
return registration;
}
&lt;/code>&lt;/pre>&lt;p>在configration类里就不需要声明这个bean,只需要直接调用 &lt;code>filterMap.put(&amp;quot;authc&amp;quot;, new 自定义Filter());&lt;/code>&lt;/p>
&lt;h3 id="access-control-allow-origin">
&lt;a href="#access-control-allow-origin" class="header-anchor">#&lt;/a>
Access-Control-Allow-Origin
&lt;/h3>&lt;p>在上面的自定义filter里,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> res.&lt;span style="color:#a6e22e">setHeader&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Access-Control-Allow-Origin&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;http://localhost:9528&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果设置为*的话,前端虽然可以收到json,但还是会报错&lt;/p>
&lt;blockquote>
&lt;p>Failed to load http://localhost:8080/test: The value of the &amp;lsquo;Access-Control-Allow-Origin&amp;rsquo; header in the response must not be the wildcard &amp;lsquo;*&amp;rsquo; when the request&amp;rsquo;s credentials mode is &amp;lsquo;include&amp;rsquo;. Origin &amp;lsquo;http://localhost:9528&amp;rsquo; is therefore not allowed access. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.&lt;/p>
&lt;/blockquote>
&lt;p>不允许设置为通配符* .&lt;/p>
&lt;p>虽然此处设置了&amp;quot;http://localhost:9528&amp;quot; 但是这种做法终究不合适.&lt;/p>
&lt;p>百度继续搜到&lt;a class="link" href="http://blog.csdn.net/u011517841/article/details/68490586" target="_blank" rel="noopener"
>此博客&lt;/a>&lt;/p>
&lt;p>得到解决方法&lt;/p>
&lt;pre tabindex="0">&lt;code>res.setHeader(&amp;#34;Access-Control-Allow-Origin&amp;#34;, ((HttpServletRequest) request).getHeader(&amp;#34;Origin&amp;#34;));
&lt;/code>&lt;/pre></description></item></channel></rss>